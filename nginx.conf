
server {
    listen 80;
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;

    server_name localhost;

    # SSL Certificate
    ssl_certificate /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;

    # Redirect to HTTPS
    if ($scheme != "https") {
        return 301 https://$server_name$request_uri;
    }

    # Static Files
    root /usr/share/nginx/html;
    index index.html;
    client_max_body_size 2M;

    location /api/v1/video {
        proxy_pass https://uploader:8080;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
    }

    location /api/v1/videometadata {
        if ($request_method = POST) {
            proxy_pass https://uploader:8080;
        }

        if ($request_method = GET) {
            proxy_pass https://cacher-api:8000;
        }

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
    }

    location /api/v1/poster {
        proxy_pass https://uploader:8080;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
    }

    # Handle React Router Requests
    location / {
        try_files $uri /index.html;
    }
}

